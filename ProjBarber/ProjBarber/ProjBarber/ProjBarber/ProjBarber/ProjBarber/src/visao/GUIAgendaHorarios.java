/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package visao;

import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.HorarioVO;
import servicos.HorarioServicos;
import servicos.ServicosFactory;


/**
 *
 * @author braia
 */
public class GUIAgendaHorarios extends javax.swing.JInternalFrame {

   DefaultTableModel dtm = new DefaultTableModel(
    new Object[][]{},
    new Object[]{"Codigo","Nome do cliente","Telefone","Horas","Minutos"});
    
   
    public GUIAgendaHorarios() {
        initComponents();
      /* Chamando o método preencherTabela 
         no construtor */
        prencherTabela();
        IconeTela();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jtAgenda = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jlNomecli = new javax.swing.JLabel();
        jtPesquisa = new javax.swing.JTextField();
        jbExcluir = new javax.swing.JButton();
        jbAtualizar = new javax.swing.JButton();
        jcbPesquisa = new javax.swing.JComboBox<>();

        setClosable(true);

        jtAgenda.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Cliente", "Telefone", "Horas", "Minutos"
            }
        ));
        jtAgenda.setFocusable(false);
        jtAgenda = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        jtAgenda.getTableHeader().setResizingAllowed(false);
        jtAgenda.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jtAgenda);

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jlNomecli.setText("Filtrar:");

        jtPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtPesquisaActionPerformed(evt);
            }
        });
        jtPesquisa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jtPesquisaKeyReleased(evt);
            }
        });

        jbExcluir.setText("Excluir");
        jbExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbExcluirActionPerformed(evt);
            }
        });

        jbAtualizar.setText("Atualizar Tabela");
        jbAtualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAtualizarActionPerformed(evt);
            }
        });

        jcbPesquisa.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cliente", "Horas" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jlNomecli)
                    .addComponent(jtPesquisa)
                    .addComponent(jbAtualizar, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                    .addComponent(jbExcluir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcbPesquisa, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jcbPesquisa, javax.swing.GroupLayout.DEFAULT_SIZE, 33, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jlNomecli)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jtPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbExcluir, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jbAtualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 429, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbAtualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAtualizarActionPerformed
       limparTabela();
       prencherTabela();
    }//GEN-LAST:event_jbAtualizarActionPerformed

    private void jbExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbExcluirActionPerformed
        deletar();
        limparTabela();
        prencherTabela();
    }//GEN-LAST:event_jbExcluirActionPerformed

    private void jtPesquisaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jtPesquisaKeyReleased
        limparTabela();
        filtrar();             
    }//GEN-LAST:event_jtPesquisaKeyReleased

    private void jtPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtPesquisaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jtPesquisaActionPerformed
 
      private void IconeTela(){
       String URL = "/icones/icon_title2.png";
       setFrameIcon(new ImageIcon(this.getClass().getResource(URL)));
    }
    
    private void limparTabela(){
           dtm.setNumRows(0);
      }
  private void prencherTabela(){
        try {
            HorarioServicos ps = ServicosFactory.getHorarioServicos();
           
            ArrayList<HorarioVO> prod = new ArrayList<>();
            
            prod = ps.buscarHorario();
             
            for(int i = 0; i < prod.size(); i++){
               dtm.addRow(new String[]{
                  String.valueOf(prod.get(i).getIdhorario()),
                  String.valueOf(prod.get(i).getNomecli()),
                  String.valueOf(prod.get(i).getTelefone()),                
                  String.valueOf(prod.get(i).getHora()),
                  String.valueOf(prod.get(i).getMinuto())
                 });
            }//fecha for
            
            
            jtAgenda.setModel(dtm);
            
        } catch (Exception e) {
         JOptionPane.showMessageDialog(
                        null,
                        "erro ao prencher tabela!",
                        "Mensagem de erro",
                        JOptionPane.ERROR_MESSAGE);
        }//fecha catch
    }//fecha prencher tabela
  
   private void deletar() {
        try {
            /* Buscando a linha que o usuário clicou */
            int linha = jtAgenda.getSelectedRow();
            
            /* Testando se o usuário selecionou alguma linha. */
            if (linha == -1) {
        JOptionPane.showMessageDialog(
                        null,
                        "Você não selecionou nenhuma linha!",
                        "Mensagem de atenção",
                        JOptionPane.INFORMATION_MESSAGE);

            } else {
                HorarioServicos ps = ServicosFactory.getHorarioServicos();
                
                /* Buscando o idProduto da linha selecionada. O zero(0) indica
                   que vamos buscar o valor da primeira coluna. */
                String idProduto = (String) jtAgenda.getValueAt(linha, 0);
                
                /* Enviando o idProduto para ser excluido. */
                 ps.deletar(Integer.parseInt(idProduto));

                //Mensagem de sucesso para o usuário!
             JOptionPane.showMessageDialog(
                        null,
                        "horario excluido com sucesso!" ,
                        "Mensagem de confirmação",
                        JOptionPane.INFORMATION_MESSAGE);
            }//fecha else
        } catch (Exception e) {
     JOptionPane.showMessageDialog(
                        null,
                        "erro ao deletar!",
                        "Mensagem de erro",
                        JOptionPane.ERROR_MESSAGE);
        }//fecha catch        
    }//fecha deletar
   
   
    private void filtrar(){
        try {
            if (jtPesquisa.getText().isEmpty()) {
                prencherTabela();
            }else{
                HorarioServicos ps = ServicosFactory.getHorarioServicos();
               
                /* Buscando o valor da JComboBox. O método getSelectedItem
                    devolve um Object selecionado na JCombo */
                String pesquisa = (String) jcbPesquisa.getSelectedItem();
                
                //Criando variável que armazenará a consulta.
                String query;
                
                /* Testando o que o usuário escolheu no JComboBox. Conforme
                    o que foi escolhido uma determinada consulta será montada. */
                if(pesquisa.equals("Codigo")){
                    query = "where idhorario = "+jtPesquisa.getText();
                }else if(pesquisa.equals("Cliente")){
                    query = "where nomecli like '%"+ jtPesquisa.getText() + "%'";
                }else{
                    query = "where hora = "+ jtPesquisa.getText();
                }//fecha else


                /* Criando um ArrayList vazio para receber os dados do banco. */
                ArrayList<HorarioVO> prod = new ArrayList<>();               
                
                /* Buscando um ArrayList conforme o filtro que o usuário
                    solicitou. */                
                prod = ps.filtrarHorario(query);
                
                /* For que preenche o modelo de tabela (dtm) buscando 
                   dados do ArrayList chamado p. */
                for (int i = 0; i < prod.size(); i++) {
                    dtm.addRow(new String[]{
                        String.valueOf(prod.get(i).getIdhorario()),
                        String.valueOf(prod.get(i).getNomecli()),
                        String.valueOf(prod.get(i).getHora()),
                        String.valueOf(prod.get(i).getMinuto())
                    });
                }//fecha for
                jtAgenda.setModel(dtm);                
            }//fecha else
        } catch (Exception e) {
     JOptionPane.showMessageDialog(
                        null,
                        "erro ao buscar!",
                        "Mensagem de erro",
                        JOptionPane.ERROR_MESSAGE);
        }//fecha catch        
    }//fecha filtrar


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jbAtualizar;
    private javax.swing.JButton jbExcluir;
    private javax.swing.JComboBox<String> jcbPesquisa;
    private javax.swing.JLabel jlNomecli;
    private javax.swing.JTable jtAgenda;
    private javax.swing.JTextField jtPesquisa;
    // End of variables declaration//GEN-END:variables
}
